plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.2'
    id 'com.enonic.xp.base' version '3.2.0'
    id 'com.github.node-gradle.node' version '3.5.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id "org.aim42.htmlSanityCheck" version '1.1.6'
}

dependencies {
    compileOnly "com.enonic.xp:core-api:${xpVersion}"
    compileOnly "com.enonic.xp:script-api:${xpVersion}"

    testImplementation "com.enonic.xp:testing:${xpVersion}"

    testImplementation "org.mockito:mockito-inline:4.9.0"
}

processResources {
  exclude '**/.gitkeep'
  exclude '**/*.es6'
}

repositories {
    mavenCentral()
    xp.enonicRepo('dev')
}

tasks.withType(Copy) {
  includeEmptyDirs = false
}

// Compiles es6 to js under src/main/resources
task compileXP(type: NodeTask) {
    group 'enonic xp'
    description 'Babel-compile Enonic XP ES6 source files'

    script = file('node_modules/@babel/cli/bin/babel.js')
    args = ["src/main/resources",
            "--plugins", "@babel/plugin-transform-parameters",
            "--plugins", "@babel/plugin-transform-destructuring",
            "--plugins", "@babel/plugin-transform-spread",
            "--plugins", "@babel/plugin-transform-arrow-functions",
            "--plugins", "@babel/plugin-proposal-object-rest-spread",
            "--out-dir", "build/resources/main"]

    inputs.dir 'src/main/resources'
    outputs.dir("build/resources/main")
}
compileXP.dependsOn += npmInstall
jar.dependsOn += 'compileXP'


task compileTest(type: NodeTask) {
    group 'enonic xp'
    description 'Babel-compile Enonic XP ES6 test files'

    script = file('node_modules/@babel/cli/bin/babel.js')
    args = ["src/test/resources",
            "--plugins", "@babel/plugin-transform-parameters",
            "--plugins", "@babel/plugin-transform-destructuring",
            "--plugins", "@babel/plugin-transform-spread",
            "--plugins", "@babel/plugin-transform-arrow-functions",
            "--plugins", "@babel/plugin-proposal-object-rest-spread",
            "--out-dir", "build/resources/test"]

    inputs.dir 'src/test/resources'
    outputs.dir("build/resources/test")
}

compileTest.dependsOn += compileXP
test.dependsOn += 'compileTest'


asciidoctor {
    sourceDir = file('docs')
    outputDir = file('build/docs')

    attributes 'source-highlighter': 'coderay'

    resources {
        from(sourceDir) {
            include '**/images/**'
            include '**/media/**'
        }
    }
}

htmlSanityCheck {
    dependsOn asciidoctor

    sourceDir = tasks.asciidoctor.outputDir
}