// Build library: gradlew build
// Install library locally for development with: gradlew install
buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.6.1'
        classpath 'gradle.plugin.org.aim42:htmlSanityCheck:1.1.3'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.base' version '3.0.0'
    id "com.moowork.node" version "1.3.1"
}

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.aim42.htmlSanityCheck'

dependencies {
    compileOnly "com.enonic.xp:core-api:${xpVersion}"
    compileOnly "com.enonic.xp:script-api:${xpVersion}"

    testCompile "com.enonic.xp:testing:${xpVersion}"

    testImplementation "org.mockito:mockito-inline:3.12.1"
}

repositories {
    jcenter()
    xp.enonicRepo('dev')
}

// Compiles es6 to js under src/main/resources
task compileXP(type: NodeTask) {
    group 'enonic xp'
    description 'Babel-compile Enonic XP ES6 source files'

    script = file('node_modules/@babel/cli/bin/babel.js')
    args = ["src/main/resources",
            "--plugins", "@babel/plugin-transform-parameters",
            "--plugins", "@babel/plugin-transform-destructuring",
            "--plugins", "@babel/plugin-transform-spread",
            "--plugins", "@babel/plugin-transform-arrow-functions",
            "--plugins", "@babel/plugin-proposal-object-rest-spread",
            "--out-dir", "build/resources/main"]

    inputs.dir 'src/main/resources'
    outputs.dir("build/resources/main")
}
compileXP.dependsOn += npmInstall
jar.dependsOn += 'compileXP'


task compileTest(type: NodeTask) {
    group 'enonic xp'
    description 'Babel-compile Enonic XP ES6 test files'

    script = file('node_modules/@babel/cli/bin/babel.js')
    args = ["src/test/resources",
            "--plugins", "@babel/plugin-transform-parameters",
            "--plugins", "@babel/plugin-transform-destructuring",
            "--plugins", "@babel/plugin-transform-spread",
            "--plugins", "@babel/plugin-transform-arrow-functions",
            "--plugins", "@babel/plugin-proposal-object-rest-spread",
            "--out-dir", "build/resources/test"]

    inputs.dir 'src/test/resources'
    outputs.dir("build/resources/test")
}

compileTest.dependsOn += compileXP
test.dependsOn += 'compileTest'



asciidoctor {
    sourceDir = file('docs')
    outputDir = file('build/docs')

    // requires project.file('verbose-mode.rb')

    attributes 'source-highlighter': 'coderay'

    resources {
        from(sourceDir) {
            include '**/media/**'
        }
    }
}

htmlSanityCheck {

    dependsOn asciidoctor

    sourceDir = new File( "$buildDir/docs/html5" )

    // files to check - in Set-notation
    sourceDocuments = files("index.html")

    // where to put results of sanityChecks...
    checkingResultsDir = new File( "$buildDir/report/htmlchecks" )
    //checkExternalLinks = false

    // fail build on errors?
    failOnErrors = true
}
