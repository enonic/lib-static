<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.23">
<title>Lib-static</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/*! Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */
/* Uncomment the following line when using as a custom stylesheet */
/* @import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"; */
html{font-family:sans-serif;-webkit-text-size-adjust:100%}
a{background:none}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
b,strong{font-weight:bold}
abbr{font-size:.9em}
abbr[title]{cursor:help;border-bottom:1px dotted #dddddf;text-decoration:none}
dfn{font-style:italic}
hr{height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
audio,video{display:inline-block}
audio:not([controls]){display:none;height:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type=checkbox],input[type=radio]{padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,::before,::after{box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;line-height:1;position:relative;cursor:auto;-moz-tab-size:4;-o-tab-size:4;tab-size:4;word-wrap:anywhere;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:0}
p{line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ul.square{list-style-type:square}
ul.circle ul:not([class]),ul.disc ul:not([class]),ul.square ul:not([class]){list-style:inherit}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:1px solid #dedede;word-wrap:normal}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt{background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
:not(pre).nobreak{word-wrap:normal}
:not(pre).nowrap{white-space:nowrap}
:not(pre).pre-wrap{white-space:pre-wrap}
:not(pre):not([class^=L])>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre{color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;line-height:1.45;text-rendering:optimizeSpeed}
pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}
pre>code{display:block}
pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;border-radius:3px;box-shadow:0 1px 0 rgba(0,0,0,.2),inset 0 0 0 .1em #fff;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin:0 auto;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child{border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:flex;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border:1px solid #e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:none;background:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:hsla(0,0%,100%,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
details{margin-left:1.25rem}
details>summary{cursor:pointer;display:block;position:relative;line-height:1.6;margin-bottom:.625rem;outline:none;-webkit-tap-highlight-color:transparent}
details>summary::-webkit-details-marker{display:none}
details>summary::before{content:"";border:solid transparent;border-left:solid;border-width:.3em 0 .3em .5em;position:absolute;top:.5em;left:-1.25rem;transform:translateX(15%)}
details[open]>summary::before{border:solid transparent;border-top:solid;border-width:.5em .3em 0;transform:translateY(15%)}
details>summary::after{content:"";width:1.25rem;height:1em;position:absolute;top:.3em;left:-1.25rem}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class=paragraph]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6);word-wrap:anywhere}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border:1px solid #e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;border-radius:4px}
.sidebarblock{border:1px solid #dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;border-radius:4px}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:first-child,.sidebarblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child,.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock>.content>pre{border-radius:4px;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.listingblock>.content>pre{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.listingblock>.content>pre{font-size:1em}}
.literalblock pre,.listingblock>.content>pre:not(.highlight),.listingblock>.content>pre[class=highlight],.listingblock>.content>pre[class^="highlight "]{background:#f7f7f8}
.literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.prettyprint{background:#f7f7f8}
pre.prettyprint .linenums{line-height:1.45;margin-left:2em}
pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}
pre.prettyprint li code[data-lang]::before{opacity:1}
pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}
table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}
table.linenotable td.code{padding-left:.75em}
table.linenotable td.linenos,pre.pygments .linenos{border-right:1px solid;opacity:.35;padding-right:.5em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}
pre.pygments span.linenos{display:inline-block;margin-right:.75em}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock:not(.excerpt)>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans-serif;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt>blockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;font-size:.85rem;text-align:left;margin-right:0}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:1.25em;word-wrap:anywhere}
td.tableblock>.content>:last-child{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>*>tr>*{border-width:1px}
table.grid-cols>*>tr>*{border-width:0 1px}
table.grid-rows>*>tr>*{border-width:1px 0}
table.frame-all{border-width:1px}
table.frame-ends{border-width:1px 0}
table.frame-sides{border-width:0 1px}
table.frame-none>colgroup+*>:first-child>*,table.frame-sides>colgroup+*>:first-child>*{border-top-width:0}
table.frame-none>:last-child>:last-child>*,table.frame-sides>:last-child>:last-child>*{border-bottom-width:0}
table.frame-none>*>tr>:first-child,table.frame-ends>*>tr>:first-child{border-left-width:0}
table.frame-none>*>tr>:last-child,table.frame-ends>*>tr>:last-child{border-right-width:0}
table.stripes-all>*>tr,table.stripes-odd>*>tr:nth-of-type(odd),table.stripes-even>*>tr:nth-of-type(even),table.stripes-hover>*>tr:hover{background:#f8f8f7}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
li>p:empty:only-child::before{content:"";display:inline-block}
ul.checklist>li>p:first-child{margin-left:-1em}
ul.checklist>li>p:first-child>.fa-square-o:first-child,ul.checklist>li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist>li>p:first-child>input[type=checkbox]:first-child{margin-right:.25em}
ul.inline{display:flex;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
td.hdlist2{word-wrap:anywhere}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:4px solid #fff;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active,#footnotes .footnote a:first-of-type:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background:#00fafa}
.black{color:#000}
.black-background{background:#000}
.blue{color:#0000bf}
.blue-background{background:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background:#fa00fa}
.gray{color:#606060}
.gray-background{background:#7d7d7d}
.green{color:#006000}
.green-background{background:#007d00}
.lime{color:#00bf00}
.lime-background{background:#00fa00}
.maroon{color:#600000}
.maroon-background{background:#7d0000}
.navy{color:#000060}
.navy-background{background:#00007d}
.olive{color:#606000}
.olive-background{background:#7d7d00}
.purple{color:#600060}
.purple-background{background:#7d007d}
.red{color:#bf0000}
.red-background{background:#fa0000}
.silver{color:#909090}
.silver-background{background:#bcbcbc}
.teal{color:#006060}
.teal-background{background:#007d7d}
.white{color:#bfbfbf}
.white-background{background:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt,summary{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,td.hdlist1,span.alt,summary{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background:#fffef7;border-color:#e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]{border-bottom:1px dotted}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#header,#content,#footnotes,#footer{max-width:none}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media amzn-kf8,print{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body class="article toc2 toc-right">
<div id="header">
<h1>Lib-static</h1>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#intro">Intro</a>
<ul class="sectlevel2">
<li><a href="#why">Why use lib-static instead of portal.assetUrl?</a></li>
</ul>
</li>
<li><a href="#get-started">Getting started</a>
<ul class="sectlevel2">
<li><a href="#install">Install</a></li>
<li><a href="#import">Import</a></li>
</ul>
</li>
<li><a href="#examples">Usage examples</a>
<ul class="sectlevel2">
<li><a href="#example-service">1. A simple service</a></li>
<li><a href="#example-urls">2. Resource URLs</a></li>
<li><a href="#example-options">3. Options and syntax</a></li>
<li><a href="#example-path">4. Path resolution and other endpoints</a></li>
<li><a href="#5_xp_controller_mapping">5. XP controller mapping</a></li>
<li><a href="#example-webapp">6. Webapp with lib-router</a></li>
<li><a href="#example-content">7. Custom content type handling</a></li>
<li><a href="#example-cache">8. Custom Cache-Control headers</a></li>
<li><a href="#example-etag">9. ETag switch</a></li>
<li><a href="#example-errors">10. Errors: throw instead of return</a></li>
<li><a href="#example-multi">11. Multiple instances</a></li>
<li><a href="#example-get">12. Low-level: .get</a></li>
</ul>
</li>
<li><a href="#api">API: functions</a>
<ul class="sectlevel2">
<li><a href="#api-buildgetter">.buildGetter</a></li>
<li><a href="#api-get">.get</a></li>
</ul>
</li>
<li><a href="#behaviour">API: response and default behaviour</a>
<ul class="sectlevel3">
<li><a href="#index-fallback">Index fallback</a></li>
<li><a href="#status">status</a></li>
<li><a href="#body">body</a></li>
<li><a href="#content-type">contentType</a></li>
<li><a href="#headers">headers</a></li>
</ul>
</li>
<li><a href="#options">API: options and overrides</a>
<ul class="sectlevel3">
<li><a href="#option-cachecontrol">cacheControl</a></li>
<li><a href="#option-contenttype">contentType</a></li>
<li><a href="#option-etag">etag</a></li>
<li><a href="#option-getcleanpath">getCleanPath</a></li>
<li><a href="#option-throwerrors">throwErrors</a></li>
</ul>
</li>
<li><a href="#mutable-assets">Important: assets and mutability</a>
<ul class="sectlevel2">
<li><a href="#mutable-headers">Headers</a></li>
<li><a href="#mutable-implementation">Implementation</a></li>
</ul>
</li>
<li><a href="#todo_later_versions">TODO: Later versions</a>
<ul class="sectlevel2">
<li><a href="#options_params">Options params</a></li>
<li><a href="#response">Response</a></li>
<li><a href="#range_handling">Range handling</a></li>
<li><a href="#resolvepathglobpathregex_root">.resolvePath(globPath/regex, root)</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="intro"><a class="link" href="#intro">Intro</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://enonic.com/developer-tour">Enonic XP</a> library for serving assets from a folder in the application resource structure. The aim is <em>"perfect client-side and network caching"</em> via response headers - with basic error handling included, and a simple basic usage but highly configurable (modelled akin to <a href="https://www.npmjs.com/package/serve-static">serve-static</a>).</p>
</div>
<div class="paragraph">
<p>Intended for setting up XP endpoints that serve static files in a cache-optimized way. Optimally, these should be <strong>immutable files</strong> (files whose content aren&#8217;t meant to change, that is, can be trusted to never change without changing the file name), but lib-static also handles ETags which provide caching with dynamic files too (<a href="#mutable-assets">more about handling mutability</a>).</p>
</div>
<div class="paragraph">
<p>Some relevant sources: <a href="https://web.dev/http-cache/">web.dev</a>, <a href="https://engineering.fb.com/2017/01/26/web/this-browser-tweak-saved-60-of-requests-to-facebook/">facebook</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching">mozilla</a>, <a href="https://imagekit.io/blog/ultimate-guide-to-http-caching-for-static-assets/">imagekit</a>, <a href="https://freecontent.manning.com/caching-assets/">freecontent.manning.com</a>.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect2">
<h3 id="why"><a class="link" href="#why">Why use lib-static instead of portal.assetUrl?</a></h3>
<div class="paragraph">
<p>Enonic XP already comes with an <a href="https://developer.enonic.com/docs/xp/stable/runtime/engines/asset-service">asset service</a>, where you can just put resources in the <em>/assets</em> root folder and use <code>portal.assetUrl(resourcePath)</code> to generate URLs from where to fetch them. Lib-static basically does the same thing, but with more features and control:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Caching behaviour:</strong> With <code>assetUrl</code>, you get a URL where the current installation/version of the app is baked in as a hash. It will change whenever the app is updated, forcing browsers to skip their locally cached resources and request new ones, even if the resource wasn&#8217;t changed during the update. Using lib-static with <a href="#mutable-assets">immutable assets</a> retains stable URLs and has several ways to adapt the header to direct browsers' caching behaviour more effectively, even for mutable assets.</p>
</li>
<li>
<p><strong>Endpoint URLs:</strong> make your resource endpoints anywhere,</p>
</li>
<li>
<p><strong>Response headers</strong>: override and control the MIME-type resolution, or the Cache-Control headers more specifically</p>
</li>
<li>
<p><strong>Control resource folders:</strong> As long as the resources are built into the app JAR, resources can be served from anywhere - even with multiple lib-static instances at once: serve from multiple specific-purpose folders, or use multi-instances to specify multiple rules from the same folder.</p>
</li>
<li>
<p>Security issues around this are handled in the standard usage: a set root folder is required (and not at the JAR root), and URL navigation out from it is prevented. But if you still REALLY want to circumvent this, there is a lower-level API too.</p>
</li>
<li>
<p><strong>Error handling:</strong> 500-type errors can be set to throw instead of returning an error response - leaving the handling to you.</p>
</li>
<li>
<p><strong>Index fallback:</strong> A URL that refers to the name of a directory that contains a fallback file (<code>index.html</code>), will fetch the fallback file.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="get-started"><a class="link" href="#get-started">Getting started</a></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="install"><a class="link" href="#install">Install</a></h3>
<div class="paragraph">
<p>Insert into <code>build.gradle</code> of your XP project, under <code>dependencies</code>, where <code>&lt;version&gt;</code> is the latest/requested version of this library - for example <code>1.0.0</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-groovy" data-lang="groovy">dependencies {
	include 'com.enonic.lib:lib-static:&lt;version&gt;'
}

repositories {
    maven {
        url 'http://repo.enonic.com/public'
    }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="import"><a class="link" href="#import">Import</a></h3>
<div class="paragraph">
<p>In any <a href="https://developer.enonic.com/docs/xp/stable/framework/controllers">XP controller</a>, import the library:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const libStatic = require('/lib/enonic/static');</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="examples"><a class="link" href="#examples">Usage examples</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect2">
<h3 id="example-service"><a class="link" href="#example-service">1. A simple service</a></h3>
<div class="paragraph">
<p>One way to use lib-static is in an <a href="https://developer.enonic.com/docs/xp/stable/runtime/engines/http-service">XP service</a>, and use it to fetch the resource and serve the entire response object to the front end.</p>
</div>
<div class="paragraph">
<p>Say you have some resources under a folder <em>/my/folder</em> in your app. Making a service serve these as resources to the frontend can be as simple as importing lib-static, using <code>.buildGetter</code> to set up a getter function, and using the getter function when serving GET requests. Let&#8217;s call the service <em>servemyfolder</em>:</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/services/servemyfolder/servemyfolder.js</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const libStatic = require('/lib/enonic/static');

// .buildGetter sets up a new, reusable getter function: getStatic
const getStatic = libStatic.buildGetter({
    root: 'my/folder',
});

exports.get = function(request) {
    return getStatic(request);
}</code></pre>
</div>
</div>
<div class="sect3">
<h4 id="example-service-urls"><a class="link" href="#example-service-urls">a) Resource path and URL</a></h4>
<div class="paragraph">
<p>If this was the entire content of <em>src/main/resources/services/servemyfolder/servemyfolder.js</em> in an app with the app name/key <code>my.xp.app</code>, then XP would respond to GET requests at the URL <code>&lt;domain&gt;/_/service/my.xp.app/servemyfolder</code> (where <code>&lt;domain&gt;</code> is the domain or other prefix, depending on vhosts etc).</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Using <a href="https://developer.enonic.com/docs/xp/stable/api/lib-portal#serviceurl">libPortal.serviceUrl</a> is recommended (for example:  <code>libPortal.serviceUrl('servemyfolder')</code>).
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Calling <code>libStatic.buildGetter</code> returns a reusable function (<code>getStatic</code>) that takes <code>request</code> as argument. It <a href="#example-path">uses the request</a> to resolve the resource path relative to the service&#8217;s own URL. So when calling <code>&lt;domain&gt;/\_/service/my.xp.app/servemyfolder/some/subdir/some.file</code>, the resource path would be <code>some/subdir/some.file</code>. And since we initially used <code>root</code> to set up <code>getStatic</code> to look for resource files under the folder my/folder, it will look for my/folder/some/subdir/some.file.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>It&#8217;s recommended to use <code>.buildGetter</code> in an <a href="https://developer.enonic.com/docs/xp/stable/runtime/engines/http-service">XP service controller</a> like this. Here, routing is included and easy to handle: the endpoint&#8217;s standard root path is already provided by XP in <code>request.contextPath</code>, and the asset path is automatically determined relative to that by simply subtracting <code>request.contextPath</code> from the beginning of <code>request.rawPath</code>. If you use <code>.buildGetter</code> in a context where the asset path (relative to <code>root</code>) can&#8217;t be determined this way, you should add a <a href="#example-path"><code>getCleanPath</code> option parameter</a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>👉 See the <a href="#example-path">path resolution</a> and <a href="#api-buildgetter">API reference</a> below for more details.</p>
</div>
</div>
<div class="sect3">
<h4 id="example-output"><a class="link" href="#example-output">b) Output</a></h4>
<div class="paragraph">
<p>If <em>my/folder/some/subdir/some.file</em> exists as a (readable) file, a full <a href="https://developer.enonic.com/docs/xp/stable/framework/http#http-response">XP response object</a> is returned. Typically something like:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">{
  status: 200,
  body: "File content from some/subdir/some.file",
  contentType: "text/plain",
  headers: {
    ETag: "1234567890abcdef",
    "Cache-Control": "public, max-age=31536000, immutable"
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>If the <a href="#example-etag">ETag/client-cache functionality</a> is active and the file hasn&#8217;t changed since a previous download, a <code>status:304</code> response is sent (and <em>only</em> <code>status</code> - instructing browsers to use locally cached resources and saving some downloading time).</p>
</div>
<div class="paragraph">
<p>👉 <a href="#behaviour">API: response and default behaviour</a></p>
</div>
</div>
<div class="sect3">
<h4 id="c_syntax_variations"><a class="link" href="#c_syntax_variations">c) Syntax variations</a></h4>
<div class="paragraph">
<p>Above, <code>'my/folder'</code> is provided to <code>.buildGetter</code> as a named <code>root</code> attribute in a parameters object. If you prefer a simpler syntax (and don&#8217;t need additional <a href="#example-options">options</a>), just use a string as a first-positional argument:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const getStatic = libStatic.buildGetter('my/folder');</code></pre>
</div>
</div>
<div class="paragraph">
<p>Also, since <code>getStatic</code> is a function that takes a <code>request</code> argument, it&#8217;s directly interchangable with <code>exports.get</code>. So if you&#8217;re really into one-liners, <strong>the entire service above could be:</strong></p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/services/servemyfolder/servemyfolder.js</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const libStatic = require('/lib/enonic/static');
exports.get = libStatic.buildGetter('my/folder');</code></pre>
</div>
</div>
<div class="paragraph">
<p>👉 <a href="#api-buildgetter">.buildGetter API reference</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="example-urls"><a class="link" href="#example-urls">2. Resource URLs</a></h3>
<div class="paragraph">
<p>Once a service (or a <a href="#example-path">different endpoint</a>) has been set up like this, it can serve the resources as regular assets to the frontend. An <a href="https://developer.enonic.com/docs/xp/stable/runtime/engines/webapp-engine">XP webapp</a> for example just needs to resolve the base URL. In the previous example we set up the the <em>servemyfolder</em> service, so we can just use <code>serviceUrl</code> here to call on it from a webapp, for example:</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/webapp/webapp.js:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const libPortal = require('/lib/xp/portal');

exports.get = function(request) {
    const myFolderUrl = libPortal.serviceUrl({service: 'servemyfolder'});

    return {
        body: `
            &lt;html&gt;
              &lt;head&gt;
                &lt;title&gt;It works&lt;/title&gt;
                &lt;link rel="stylesheet" type="text/css" href="${staticServiceUrl}/styles.css"/&gt;
              &lt;/head&gt;

              &lt;body&gt;
                  &lt;h1&gt;It works!&lt;/h1&gt;
                  &lt;img src="${staticServiceUrl}/logo.jpg" /&gt;
                  &lt;script src="${staticServiceUrl}/js/myscript.js"&gt;&lt;/script&gt;
              &lt;/body&gt;
            &lt;/html&gt;
        `
    };
};</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="example-options"><a class="link" href="#example-options">3. Options and syntax</a></h3>
<div class="paragraph">
<p>The behaviour of the returned getter function from <code>.buildGetter</code> can be controlled with more <a href="#options">options</a>, in addition to the <code>root</code>.</p>
</div>
<div class="paragraph">
<p>If you set <code>root</code> with a pure string as the first argument, add a second argument object for the options. If you use the named-parameter way to set <code>root</code>, the options must be in the same first-argument object - in practice, just <em>never use two objects as parameters</em>.</p>
</div>
<div class="paragraph">
<p>These are valid and equivalent:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">libStatic.buildGetter({
    root: 'my/folder',
    option1: "option value 1",
    option2: "option value 2"
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8230;&#8203;and:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">libStatic.buildGetter('my/folder', {
    option1: "option value 1",
    option2: "option value 2"
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>👉 <a href="#options">Options API reference</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="example-path"><a class="link" href="#example-path">4. Path resolution and other endpoints</a></h3>
<div class="paragraph">
<p>Usually, the path to the resource file (relative to the root folder) is <a href="#example-service-urls">determined from the request</a>. Out of the box, this depends on a few things:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The controller must be able to accept requests from sub-URI. For example, the controller handling requests to a root URI <code>/my/endpoint/</code> must also respond to <code>/my/endpoint/subpath</code>, <code>/my/endpoint/other/path</code>, etc.</p>
</li>
<li>
<p>The incoming <code>request</code> in the controller object must contain a <code>rawPath</code> and <code>contextPath</code> attribute to compare, and the contextPath value must be the prefix in the rawPath value. For example, from this request&#8230;&#8203;</p>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">{
  rawPath:     "/_/service/my.xp.app/servemyfolder/some/subdir/some.file",
  contextPath: "/_/service/my.xp.app/servemyfolder"
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8230;&#8203;the relative resource path is resolved to <code>"/some/subdir/some.file"</code>. And to recap: lib-static will look for <code>&lt;root&gt;/some/subdir/some.file</code>, where <code>root</code> is the folder that was set in <code>libStatic.buildGetter</code>.</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="paragraph">
<p>All the previous examples use lib-static in <a href="https://developer.enonic.com/docs/xp/stable/runtime/engines/http-service">XP services</a>, because services act exactly like this. The premises are fulfilled out of the box here, so the path resolution works without further setup.</p>
</div>
<div class="paragraph">
<p>However, lib-static can be used in other contexts than in services, where these premises may not be true and you may need to roll your own path resolution:</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect3">
<h4 id="example-getcleanpath"><a class="link" href="#example-getcleanpath">a) Override: getCleanPath</a></h4>
<div class="paragraph">
<p>You can <strong>override the default file path resolution</strong> by implementing a <code>request &#8658; string</code> function, and add that as a <code>getCleanPath</code> option in <code>.buildGetter</code>.</p>
</div>
<div class="paragraph">
<p>👉 <a href="#options">Options API reference</a></p>
</div>
<div class="paragraph">
<p>For example, a simplified version of the default could be implemented like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">exports.get = libStatic.buildGetter({
    root: 'my/folder',
    getCleanPath: request =&gt; {
        const prefix = request.contextPath;
        return request.rawPath.substring(prefix.length);
    }
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="example-gotchas"><a class="link" href="#example-gotchas">b) Gotchas</a></h4>
<div class="paragraph">
<p>When writing a good <code>getCleanPath</code> function, here are some <strong>rules of thumb</strong>:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>request &#8658; string</code> function, where the string is the final resolved relative path under <code>&lt;root&gt;</code></p>
</li>
<li>
<p>In order for index fallbacks to work properly:</p>
<div class="ulist">
<ul>
<li>
<p>URIs with a trailing slash should also return the trailing slash in the string,</p>
</li>
<li>
<p>And vice versa: URIs without a trailing slash should not return one,</p>
</li>
<li>
<p>URIs to the endpoint itself should return an empty string (unless there&#8217;s a trailing slash, in which case only a slash should be returned),</p>
</li>
<li>
<p>For consistency, URIs to other content below the endpoint should return a path beginning with a slash.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Use <code>request.rawPath</code> as the basis. Don&#8217;t use <code>request.path</code>.</p>
<div class="ulist">
<ul>
<li>
<p>The <code>.path</code> attribute has a less reliable behavior for lib-static&#8217;s purpose: vhosting is kept, url entities may be escaped (which may evade some built-in security checks or fail to find files/folders with special characters in their names), and trailing slashes are stripped away (which makes index fallbacks impossible). The <code>.rawPath</code> attribute deals with these issues.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
XP version <strong>7.7.1</strong> is the first version where these issues are handled well. On earlier versions, trailing slashes are stripped from <code>.rawPath</code> too, so index fallback can&#8217;t be expected to work. Upgrade XP if necessary.
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>The next examples show how to achieve this in contexts outside of services:</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="5_xp_controller_mapping"><a class="link" href="#5_xp_controller_mapping">5. XP controller mapping</a></h3>
<div class="paragraph">
<p>Using <a href="#example-getcleanpath">.getCleanPath</a>, lib-static can be used to serve assets from <a href="https://developer.enonic.com/docs/xp/stable/cms/mappings">mapped controllers</a>.</p>
</div>
<div class="paragraph">
<p>This example uses regular expressions to support the <code>.getCleanPath</code> <a href="#example-gotchas">criteria</a>, and will serve assets (including index fallbacks) from the root <em>my/folder</em> on the endpoint <code>&lt;siteUrl&gt;/static</code>:</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/site/site.xml:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-xml" data-lang="xml">&lt;mapping controller="/controllers/static.js" order="50"&gt;
    &lt;pattern&gt;/static(/.*)?$&lt;/pattern&gt;
&lt;/mapping&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">src/main/resources/controllers/static.js:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const getStatic = libStatic.buildGetter({
        root: `my/folder`,
        getCleanPath: request =&gt; {
            const basePath = `${libPortal.getSite()._path}/static`;
            const pattern = new RegExp(`${basePath}(/.*)?$`);
            const matched = (request.rawPath || '').match(pattern);

            if (!matched) {
                throw Error(`basePath ($basePath}) was not found in request.rawPath (${request.rawPath}`);
            }

            return matched[1] || '';
        },
    });

exports.get = request =&gt; getStatic(request);</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="example-webapp"><a class="link" href="#example-webapp">6. Webapp with lib-router</a></h3>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
This example depends on <a href="https://market.enonic.com/vendors/enonic/router-lib">lib-router</a> version 3.0.0 or higher.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Lib-static can also be used to serve assets on URIs directly below an <a href="https://developer.enonic.com/docs/xp/stable/runtime/engines/webapp-engine#webapp_js">XP webapp</a>. For example, let&#8217;s make a simple webapp accessible at URL <code>&lt;webappRoot&gt;</code> that serves its own frontend assets at <code>&lt;webappRoot&gt;/static/*</code>.</p>
</div>
<div class="paragraph">
<p><a href="https://market.enonic.com/vendors/enonic/router-lib">Lib-router</a> is used to <strong>add sub-routes under the webapp&#8217;s root URL</strong>, for example the route <code>&lt;webappUrl&gt;/static</code>. Lib-router can extract deeper sub-URIs below that, for example <code>&lt;webappUrl&gt;/static/css/styles.css</code>. This sub-URI is then isolated (<code>"css/styles.css"</code>) and added to the <code>request</code> object, under <code>request.pathParams</code> - as <code>.libRouterPath</code> in the example below.</p>
</div>
<div class="paragraph">
<p><strong>Bottom line:</strong> Combined with lib-router like this, <a href="#example-getcleanpath">.getCleanPath</a> can just fetch and return <code>request.pathParams.libRouterPath</code>, and the <code>.getCleanPath</code> <a href="#example-gotchas">gotchas</a> are automatically handled (except for index fallback at the root - more on that <a href="#index-fallback-route">here</a>).</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/webapp/webapp.js:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const libStatic = require('/lib/enonic/static');

const libRouter = require('/lib/router')();

// Asking lib-router to handle all requests from here on
exports.all = function(request) {
    return libRouter.dispatch(request);
};

// Set up a lib-static getter that fetches files below the 'static' folder...
const getStatic = libStatic.buildGetter(
    {
        root: 'static',
        getCleanPath: request =&gt; request.pathParams.libRouterPath
    }
);

// ...which will respond at the route &lt;webappRoot&gt;/static/.+
// The .+ part is a mandatory sub-URI below static/,
// and is inserted into request.pathParams.libRouterPath:
libRouter.get(
    '/static/{libRouterPath:.+}',
    request =&gt; getStatic(request)
);


// The main webapp, at &lt;webappRoot&gt;:
libRouter.get(

    // lib-router 3.+ syntax for matching the webapp root,
    // with an optional trailing slash:
    '/?',

    request =&gt; {

        // In order to ensure that the relative urls below work,
        // webapp root without a trailing slash is redirected to the same address WITH a slash:
        if (!(req.rawPath || '').endsWith('/')) {
            return {
                redirect: req.path + '/'
            }
        }

        return {
            body: '
                &lt;html&gt;
                    &lt;head&gt;
                        &lt;title&gt;Webapp&lt;/title&gt;
                        &lt;link href="static/styles.css" rel="stylesheet" type="text/css" /&gt;
                    &lt;/head&gt;

                    &lt;body&gt;
                        &lt;h1&gt;My webapp&lt;/h1&gt;
                        &lt;img src="static/images/my-logo.jpg" /&gt;
                    &lt;/body&gt;
                &lt;/html&gt;'
        };
    }
);</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect3">
<h4 id="index-fallback-route"><a class="link" href="#index-fallback-route">a) Special case - webapp route with root-index-fallback</a></h4>
<div class="paragraph">
<p>The way lib-router works, only defining <code>'/static/{libRouterPath:.+}'</code> will make it respond to sub-URIs after <code>static/</code> - that is, <em>both the slash and some sub-URI is required</em>. So in the example above, lib-static&#8217;s <a href="#index-fallback">index fallback functionality</a> is supported <em>below</em> the actual route (for example, <code>&lt;webappRoot&gt;/static/subfolder</code> would serve a file <em>/static/subfolder/index.html</em> if it existed), but the route will not match <code>&lt;webappRoot&gt;/static</code> or <code>&lt;webappRoot&gt;/static/</code> (so they will just return a 404).</p>
</div>
<div class="paragraph">
<p>Let&#8217;s say we for some reason wanted that route to use index fallback at the root of <code>/static</code>, not only handle the sub-URIs. More precisely, we want to expand the example above so that lib-static can make <code>&lt;webappRoot&gt;/static</code> redirect to <code>&lt;webappRoot&gt;/static/</code>, and <code>&lt;webappRoot&gt;/static/</code> respond with (the contents of) a file <code>static/index.html</code>.</p>
</div>
<div class="paragraph">
<p>For this, we&#8217;ll add a second route at the root (stay with me here), by <strong>setting up lib-router with an array</strong> instead of a string. The added item has an optional trailing slash <code>/?</code>, so it&#8217;s activated at <code>/static</code> as well as <code>/static/</code>:</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/webapp/webapp.js:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">// ...

libRouter.get(
    [
        '/static/?',
        '/static/{libRouterPath:.+}',
    ]
    request =&gt; getStatic(request)
);

// ...</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now, on <code>&lt;webappRoot&gt;/static</code> and <code>&lt;webappRoot&gt;/static/</code>, lib-router matches with the new item in the route array, <code>'/static/?'</code>. But since <code>libRouterPath</code> is not defined in that item, it means <code>request.pathParams.libRouterPath</code> will be <code>undefined</code> at the root. So according to the <a href="#example-gotchas">criteria</a> for <code>getCleanPath</code>, <strong>we must also update the <code>getCleanPath</code> function</strong> in the lib-static getter.</p>
</div>
<div class="paragraph">
<p>In order to return <code>""</code> for <code>&lt;webappRoot&gt;/static</code>, and <code>"/"</code> for <code>&lt;webappRoot&gt;/static/</code>, what <code>getCleanPath</code> needs to do is to return <code>request.pathParams.libRouterPath</code> if it a value, and if not, return an empty string at <code>&lt;webappRoot&gt;/static</code> and a slash at <code>&lt;webappRoot&gt;/static/</code>. The easiest is to just see if <code>request.rawPath</code> ends with a slash or not.</p>
</div>
<div class="paragraph">
<p>The final adjustment to the webapp looks like this:</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/webapp/webapp.js:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">// ...

const getStatic = libStatic.buildGetter(
    {
        root: 'static',
        getCleanPath: request =&gt; (
            request.pathParams.libRouterPath ||
            (request.rawPath.endsWith("/")
                    ? "/"
                    : ""
            )
        ),
    }
);

libRouter.get(
    [
        '/static/?',
        '/static/{libRouterPath:.+}',
    ]
    request =&gt; getStatic(request)
);

// ...</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now, a file static/index.html will be served at <code>&lt;webappRoot&gt;/static/</code>, with automatic redirect from <code>&lt;webappRoot&gt;/static</code>.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="b_special_case_avoid_overlapping_with_assets_files"><a class="link" href="#b_special_case_avoid_overlapping_with_assets_files">b) Special case - avoid overlapping with /assets/ files</a></h4>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The following applies to XP 7, and may be subject to change in XP 8 (but not before, since it&#8217;s breaking behaviour).
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>In the current versions of enonic XP, the webapp engine is set up so that if some path <code>&lt;webappRoot&gt;/my/path.ext</code> matches a file in the <em>assets</em> folder, <em>src/main/resources/assets/my/path.ext</em>, then the engine will give that <strong>priority over the webapp.js controller and directly serve that file instead</strong>.</p>
</div>
<div class="paragraph">
<p>In other words, if a file called <em>assets/subpath</em> exists, and you use the examples and patterns above to define your own route <code>libRouter.get('subpath'), &#8230;&#8203;</code> then at <code>&lt;webappRoot&gt;/subpath</code> your route will be ignored and you will get the file from the asset service instead. Confusion may ensue.</p>
</div>
<div class="paragraph">
<p>So <strong>avoid defining routes that may overlap with sub-paths to existing files under <em>src/main/resources/assets/*</em></strong>.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The same thing goes for the pattern <code>_/asset/*</code> (which is <a href="https://developer.enonic.com/docs/xp/stable/runtime/engines/asset-service#asset_files">better documented</a>).</p>
</div>
<div class="paragraph">
<p>For example, <code>&lt;webappRoot&gt;/_/asset/my/path.ext</code> will serve <em>/assets/my/path.ext</em> and ignore your <code>libRouter.get('/_/asset/{subUri: .+}'), &#8230;&#8203;</code>.</p>
</div>
<div class="paragraph">
<p>But starting with an underscore, this is far easier to handle - just avoid defining routes starting with <code>_/asset/</code>, or with an underscore in the first place.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="example-content"><a class="link" href="#example-content">7. Custom content type handling</a></h3>
<div class="paragraph">
<p>By default, lib-static detects <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME-type</a> automatically. But you can use the <code>contentType</code> <a href="#example-options">option</a> to override it. Either way, the result is a string returned with <a href="#behaviour">the response object</a>.</p>
</div>
<div class="paragraph">
<p>If set as the <strong>boolean</strong> <code>false</code>, the detection and handling is switched off and no <code>Content-Type</code> header is returned:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const getStatic = libStatic.buildGetter({
    root: 'my/folder',
    contentType: false // &lt;-- Empty string does the same
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>If set as a (non-empty) <strong>string</strong>, there will be no processing, but that string will be returned as a fixed content type (a bad idea for handling multiple resource types, of course):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const getStatic = libStatic.buildGetter({
    root: 'my/folder',
    contentType: "everything/thismimetype"
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>If set as an <strong>object</strong>, keys are file types (that is, the extensions of the requested asset file names, so beware of file extensions changing during compilation. To be clear, you want the post-compilation extension) and values are the returned MIME-type strings:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const getStatic = libStatic.buildGetter({
    root: 'my/folder',
    contentType: {
        json: "application/json",
        mp3: "audio/mpeg",
        TTF: "font/ttf"
    }
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>For any extension not found in that object, it will fall back to automatically detecting the type, so you can override only the ones you&#8217;re interested in and leave the rest.</p>
</div>
<div class="paragraph">
<p>It can also be set as a <strong>function</strong>: <code>(path, resource) &#8658; mimeTypeString?</code> for fine-grained control: for each circumstance, return a specific mime-type string value, or <code>false</code> to leave the <code>contentType</code> out of the response, or <code>null</code> to fall back to lib-static&#8217;s built-in detection:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const getStatic = libStatic.buildGetter({
    root: 'my/folder',
    contentType: function(path, resource) {
        if (path.endsWith('.myspoon') &amp;&amp; resource.getSize() &gt; 10000000) {
            return "media/toobig";
        }
        return null;
    }
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>👉 <a href="#options">Options API reference</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="example-cache"><a class="link" href="#example-cache">8. Custom Cache-Control headers</a></h3>
<div class="paragraph">
<p>The <code>cacheControl</code> <a href="#example-options">option</a> controls the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control">'Cache-Control'</a> string that&#8217;s returned in the header with a successful resource fetch. The string value, if any, directs the intraction between a browser and the server on subsequent requests for the same resource. By <a href="#behaviour">default</a> the string <code>"public, max-age=31536000, immutable"</code> is returned, the <code>cacheControl</code> option overrides this to return a different string, or switch it off:</p>
</div>
<div class="paragraph">
<p>Setting it to the <strong>boolean</strong> <code>false</code> means turning the entire cache-control header off in the response:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const getStatic = libStatic.buildGetter({
    root: 'my/folder',
    cacheControl: false
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>Setting it as a <strong>string</strong> instead, always returns that string:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const getStatic = libStatic.buildGetter({
    root: 'my/folder',
    cacheControl: 'immutable'
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>It can also be set as a <strong>function</strong>: <code>(path, resource, mimeType) &#8658; cacheControlString?</code>, for fine-grained control. For particular circumstances, return a cache-control string for override, or <code>false</code> for leaving it out, or <code>null</code> to fall back to the default cache-control string <code>"public, max-age=31536000, immutable"</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const getStatic = libStatic.buildGetter({
    root: 'my/folder',
    cacheControl: function(path, resource, mimeType) {
        if (path.startsWith('/uncached')) {
            return false;
        }
        if (mimeType==='text/plain') {
            return "max-age=3600";
        }
        if (resource.getSize() &lt; 100) {
            return "no-cache";
        }
        return null;
    }
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>👉 See the <a href="#options">options API reference</a> below, and <a href="#mutable-assets">handling mutable and immutable assets</a>, for more details.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="example-etag"><a class="link" href="#example-etag">9. ETag switch</a></h3>
<div class="paragraph">
<p>By <a href="#behaviour">default</a>, an ETag is generated from the asset and sent along with the response as a header, in XP prod run mode. In <a href="https://developer.enonic.com/docs/enonic-cli/master/dev#start">XP dev mode</a>, no ETag is generated.</p>
</div>
<div class="paragraph">
<p>This default behaviour can be overridden with the <code>etag</code> option. If set to <code>true</code>, an ETag will always be generated, even in XP dev mode. If set to <code>false</code>, no ETag is generated, even in XP prod mode:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const getStatic = libStatic.buildGetter({
    root: 'my/folder',
    etag: false
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>👉 <a href="#options">Options API reference</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="example-errors"><a class="link" href="#example-errors">10. Errors: throw instead of return</a></h3>
<div class="paragraph">
<p>By <a href="#behaviour">default</a>, runtime errors during <code>.get</code> or during the returned getter function from <code>.buildGetter</code> will log the error message and return a 500-status response to the client.</p>
</div>
<div class="paragraph">
<p>If you instead want to catch these errors and handle them yourself, set a <code>throwErrors: true</code> option:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const getStatic = libStatic.buildGetter({
    root: 'my/folder',
    throwErrors: true
});

exports.get = function(request) {
    try {
        return getStatic(request);

    } catch (e) {
        // handle the error...
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>👉 <a href="#options">Options API reference</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="example-multi"><a class="link" href="#example-multi">11. Multiple instances</a></h3>
<div class="paragraph">
<p>Lib-static can be set up to respond with several instances in parallel, thereby defining different rules for different files/folders/scenarios.</p>
</div>
<div class="paragraph">
<p>👉 <a href="#separate-instances">Usage example below</a>.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect2">
<h3 id="example-get"><a class="link" href="#example-get">12. Low-level: .get</a></h3>
<div class="paragraph">
<p>Lib-static exposes a second function <code>.get</code> (in addition to <code>.buildGetter</code>), for doing a direct resource fetch when the resource path is already known/resolved. The idea is to allow closer control with each call: implement your own logic and handling around it.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
For most scenarios though, you&#8217;ll probably want to use <a href="#api-buildgetter"><code>.buildGetter</code></a>.
</td>
</tr>
</table>
</div>
<div class="sect3">
<h4 id="a_similarities"><a class="link" href="#a_similarities">a) Similarities</a></h4>
<div class="ulist">
<ul>
<li>
<p>Just like the getter function returned by <code>.buildGetter</code>, <code>.get</code> also returns a <a href="#behaviour">full response object</a> with status, body, content type and a generated ETag, and has error detection and corresponding responses (statuses 400, 404 and 500).</p>
</li>
<li>
<p>The <a href="#options">options</a> are also mostly the same.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="b_differences"><a class="link" href="#b_differences">b) Differences</a></h4>
<div class="paragraph">
<p><code>.get</code> is different from <code>.buildGetter</code> in these ways:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>.get</code> is intended for lower-level usage (wraps less functionality, but gives the opportunity for even more controlled usage).</p>
</li>
<li>
<p>Only one call: whereas <code>.buildGetter</code> sets up a reusable getter function, <code>.get</code> <em>is</em> the getter function.</p>
</li>
<li>
<p>No root folder is set up with <code>.get</code>. In every call, instead of the <code>request</code> argument, <code>.get</code> takes a full, absolute resource <code>path</code> (relative to JAR root) string. This allows <em>any valid path</em> inside the JAR except the root <code>/</code> itself - including source code! <strong>Be careful</strong> how you resolve the <code>path</code> string in the controller to avoid security flaws, such as opening a service to reading <em>any file in the JAR</em>, etc.</p>
</li>
<li>
<p>Since <code>.get</code> doesn&#8217;t resolve the resource path from the request, there&#8217;s no <code>getCleanPath</code> override option here.</p>
</li>
<li>
<p>There is no check in <code>.get</code> for matching ETag (<code>If-None-Match</code> header), and no functionality to return a body-less status 304. <code>.get</code> always tries to fetch the resource.</p>
</li>
<li>
<p>There is no <a href="#index-fallback">index fallback</a> functionality in <code>.get</code>.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="c_examples"><a class="link" href="#c_examples">c) Examples</a></h4>
<div class="paragraph">
<p>An example service <em>getSingleStatic.es6</em> that always returns a particular asset <em>/public/my-folder/another-asset.css</em> from the JAR:</p>
</div>
<div class="listingblock">
<div class="title">src/main/resources/services/getSingleStatic/getSingleStatic.es6</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const libStatic = require('lib/enonic/static');

exports.get = (request) =&gt; {
    return libStatic.get('public/my-folder/another-asset.css');
};</code></pre>
</div>
</div>
<div class="paragraph">
<p>This is equivalent with using the <code>path</code> attribute:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">    // ...

    return libStatic.get({
        path: 'public/my-folder/another-asset.css'
    });

    // ...</code></pre>
</div>
</div>
<div class="paragraph">
<p>It&#8217;s also open to the same <a href="#options">options</a> as <code>.buildGetter</code> - except for <code>getCleanPath</code> which doesn&#8217;t exist for <code>.get</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">    // ...

    return libStatic.get('public/my-folder/another-asset.css',
        {
            // ... options ...
        }
    );

    // OR if you prefer:

    return libStatic.get(
        {
            path: 'public/my-folder/another-asset.css',
            // ... more options ...
        }
    );

    // ...</code></pre>
</div>
</div>
<div class="paragraph">
<p>👉 <a href="#api-get">.get API reference</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="api"><a class="link" href="#api">API: functions</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Two controller functions are exposed.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The first, <a href="#api-buildgetter">buildgetter</a>, is a broad configure-once/catch-all approach that&#8217;s based on the relative path in the request. This is the one you usually want.</p>
</li>
<li>
<p>The second, <a href="#api-get">get</a>, specifically gets an asset based on a path string and options for each particular call.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>👉 <a href="#example-get">Similarities and differences</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect2">
<h3 id="api-buildgetter"><a class="link" href="#api-buildgetter">.buildGetter</a></h3>
<div class="paragraph">
<p>Sets up and returns a reusable resource-getter function.</p>
</div>
<div class="paragraph">
<p>Can be used in three ways:</p>
</div>
<div class="paragraph">
<p><code>const getStatic = libStatic.buildGetter(root);</code></p>
</div>
<div class="paragraph">
<p><code>const getStatic = libStatic.buildGetter(root, options);</code></p>
</div>
<div class="paragraph">
<p><code>const getStatic = libStatic.buildGetter(optionsWithRoot);</code></p>
</div>
<div class="paragraph">
<p>The getter function (<code>getStatic</code>) takes the <a href="https://developer.enonic.com/docs/xp/stable/framework/http#http-request">XP request object</a> as argument. <code>request</code> is used to determine the asset path, and to check the <code>If-None-Match</code> header. It then returns a <a href="#behaviour">response object</a> for the asset:</p>
</div>
<div class="paragraph">
<p><code>const response = getStatic(request);</code></p>
</div>
<div class="paragraph">
<p>An ETag value is generated and cached for the requested asset. If that matches the <code>If-None-Match</code> header in the request, the response will only contain: <code>{status: 304}</code>, signifying the asset hasn&#8217;t changed and the cache can be used instead of downloading the asset. If there&#8217;s no match, the asset will be read out and returned in the <a href="#behaviour">response</a> under <code>body</code>, with a <code>status</code> 200.</p>
</div>
<div class="sect3">
<h4 id="buildgetter-params"><a class="link" href="#buildgetter-params">Params:</a></h4>
<div class="ulist">
<ul>
<li>
<p><code>root</code> (string): path to a root folder where resources are found. This string points to a root folder in the built JAR.
&gt; NOTE: The phrase <em>"a root folder in the built JAR"</em> is accurate, but if you think JAR&#8217;s can be a bit obscure here&#8217;s an easier mental model: <code>root</code> points to a folder below and relative to the <em>build/resources/main</em>. This is where all assets are collected when building the JAR. And when running XP in <a href="https://developer.enonic.com/docs/enonic-cli/master/dev#start">dev mode</a>, it actually IS where assets are served from. Depending on specific build setups, you can also think of <code>root</code> as being relative to <em>src/main/resources/</em>.</p>
</li>
<li>
<p><code>options</code> (object): add an <a href="#options">options object</a> after <code>path</code> to control behaviour for all responses from the returned getter function.</p>
</li>
<li>
<p><code>optionsWithRoot</code> (object): same as above: an <a href="#options">options object</a>. But when used as the first and only argument, this object <em>must</em> also include a <code>{ root: &#8230;&#8203;, }</code> attribute too - a root string same as above. This is simply for convenience if you prefer named parameters instead of a positional <code>root</code> argument. If both are supplied, the positional <code>root</code> argument is used.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If <code>root</code> (either as a string argument or as an attribute in a <code>options</code> object) resolves to (or outside) the JAR root, contains <code>..</code> or any of the characters <code>: | &lt; &gt; ' " ´ * ?</code> or backslash or backtick, or is missing or empty, an error is thrown.</p>
</div>
<div class="paragraph">
<p>Again, you need to call the returned getter function to actually get a response.</p>
</div>
<div class="paragraph">
<p>👉 <a href="#example-service">Usage examples</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="api-get"><a class="link" href="#api-get">.get</a></h3>
<div class="paragraph">
<p>A specific-recource getter method, returns a <a href="#behaviour">response object</a> for the particular asset that&#8217;s named in the argument string.</p>
</div>
<div class="paragraph">
<p>Three optional and equivalent syntaxes:</p>
</div>
<div class="paragraph">
<p><code>const response = libStatic.get(path);</code></p>
</div>
<div class="paragraph">
<p><code>const response = libStatic.get(path, options);</code></p>
</div>
<div class="paragraph">
<p><code>const response = libStatic.get(optionsWithPath);</code></p>
</div>
<div class="sect3">
<h4 id="params"><a class="link" href="#params">Params:</a></h4>
<div class="ulist">
<ul>
<li>
<p><code>path</code> (string): path and full file name to an asset file, relative to the JAR root (or relative to <em>build/resources/main</em> in XP dev mode, see <a href="#buildgetter-params">the 'root' param explanation</a> above. Cannot contain <code>..</code> or any of the characters <code>: | &lt; &gt; ' " ´ * ?</code> or backslash or backtick.</p>
</li>
<li>
<p><code>options</code> (object): add an <a href="#options">options object</a> after <code>path</code> to control behaviour for this specific response.</p>
</li>
<li>
<p><code>optionsWithPath</code> (object): same as above, an <a href="#options">options object</a> but when used as the first and only argument, this object <em>must</em> include a <code>{ path: &#8230;&#8203;, }</code> attribute too - a path string same as above. This is simply for convenience if you prefer named parameters instead of a positional <code>path</code> argument. If both are supplied, the positional <code>path</code> argument is used.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If <code>path</code> (either as a string argument or as an attribute in a <code>options</code> object) resolves to (or outside) the JAR root, contains <code>..</code> or any of the characters <code>: | &lt; &gt; ' " ´ * ?</code> or backslash or backtick, or is missing or empty, an error is thrown.</p>
</div>
<div class="paragraph">
<p>👉 <a href="#example-get">Usage examples</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="behaviour"><a class="link" href="#behaviour">API: response and default behaviour</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Unless some of these aspects are overriden by an <a href="#options">options parameter</a>, the returned object (from both <code>.get</code> and the getter function created by <code>.buildGetter</code>) is a standard <a href="https://developer.enonic.com/docs/xp/stable/framework/http#http-response">XP response object</a> ready to be returned from an XP controller.</p>
</div>
<div class="paragraph">
<p><strong>Response signature:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre>{ status, body, contentType, headers }</pre>
</div>
</div>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>{
    status: 200,
    body: "I am some content",
    contentType: "text/plain",
    headers: {
        'Cache-Control': 'public, max-age=31536000, immutable',
        ETag: '"12a39b87c43d7e4f5"'
    }
}</pre>
</div>
</div>
<div class="paragraph">
<p>👉  <a href="#example-output">Output: intro/example</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect3">
<h4 id="index-fallback"><a class="link" href="#index-fallback">Index fallback</a></h4>
<div class="paragraph">
<p>If the URL points to a folder instead of a file, and that folder contains a fallback file (<code>index.html</code>), the fallback file is served with the appropriate contentType and a cache-busting Cache-Control header.</p>
</div>
<div class="paragraph">
<p>If the folder-name URL does not end with a trailing slash, this slash is automatically added via a redirect. This is to ensure that later relative links will work.</p>
</div>
<div class="paragraph">
<p>This is a feature in <a href="#api-buildgetter">.buildGetter</a>, but not <a href="#api-get">.get</a> - if you use .get you must implement it yourself.</p>
</div>
<div id="osgi-bug" class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
A workaround for a <a href="https://issues.apache.org/jira/browse/FELIX-6294">a bug in the underlying OSGi system</a> causes the following behaviour in current versions of lib-static: directories can be referenced to get an index fallback both with and without a trailing slash - but <strong>empty files cannot be served and will cause a status <code>404</code> response instead</strong>. When a fix for the underlying bug is available, lib-static will be updated to support both empty files and directories with index fallback.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="status"><a class="link" href="#status">status</a></h4>
<div class="paragraph">
<p>Standard <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">HTTP error codes</a>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>200</code> (OK): successful, resource fetched. Either the resource path pointed to a readable file, or to a folder where a <a href="#index-fallback">index fallback</a> file was found (index fallback is an automatic feature of <a href="#api-buildgetter">.buildGetter</a>, but not <a href="#api-get">.get</a>).</p>
</li>
<li>
<p><code>303</code> (Redirect): resource path hit a folder with an index fallback file in it, but the path doesnt end with a slash. It needs the slash, so make a redirect to add it. This is an automatic feature of <a href="#api-buildgetter">.buildGetter</a>, but not <a href="#api-get">.get</a>.</p>
</li>
<li>
<p><code>304</code> (Not Modified): matching ETag - the requested resource hasn&#8217;t changed since a previous download. So a response with this status only is a signal to browsers to reuse their locally cached resource instead of downloading it again. This is an automatic feature of <a href="#api-buildgetter">.buildGetter</a>, but not <a href="#api-get">.get</a>.</p>
</li>
<li>
<p><code>400</code> (Bad Request): the resource path is illegal, that is, resolves to an empty path or contains illegal characters: <code>: | &lt; &gt; ' " ´ * ?</code> or backslash or backtick.</p>
</li>
<li>
<p><code>404</code> (Not Found): a valid resource path, but it doesn&#8217;t point to a readable file or a directory with an index fallback in it. Currently, it can also signify an <a href="#osgi-bug">empty file</a>.</p>
</li>
<li>
<p><code>500</code> (Error): a server-side error happened. Details will be found in the server log, but not returned to the user.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="body"><a class="link" href="#body">body</a></h4>
<div class="paragraph">
<p>On status-<code>200</code> responses, this is the content of the requested asset. Can be text or binary, depending on the file and type. May also carry error messages.</p>
</div>
<div class="paragraph">
<p>Empty on status-<code>304</code>.</p>
</div>
<div class="paragraph">
<p>Interally in XP (before returning it to the browser), this content is not a string but a <strong>resource stream</strong> from <a href="https://developer.enonic.com/docs/xp/stable/api/lib-io">ioLib</a> (see resource.getStream). This works seamlessly for returning both binary and non-binary files in the response directly to browsers. But might be less straightforward when writing tests or otherwise intercepting the output.</p>
</div>
<div class="paragraph">
<p>In <a href="https://developer.enonic.com/docs/enonic-cli/master/dev#start">XP dev mode</a>, <code>400</code>- and and <code>404</code>-status errors will have the requested asset path in the body.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="content-type"><a class="link" href="#content-type">contentType</a></h4>
<div class="paragraph">
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types">MIME type</a> string, after best-effort-automatically determining it from the requested asset. Will be <code>text/plain</code> on error messages.</p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="headers"><a class="link" href="#headers">headers</a></h4>
<div class="paragraph">
<p><strong>Default headers</strong> optimized for immutable and <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#private_browser_caches">browser cached</a> resources.</p>
</div>
<div class="paragraph">
<p>Typically, there&#8217;s an <code>ETag</code> and a <code>Cache-Control</code> attribute, but this may depend on whether they are active in <a href="#options">options</a>, and on XP runtime mode: ETag is usually switched off in dev mode.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p><strong>Important:</strong> mutable assets should not be served with the default 'Cache-Control' header: <code>'public, max-age=31536000, immutable'</code>.</p>
</div>
<div class="paragraph">
<p>👉  <a href="#mutable-headers">Handling mutable assets</a></p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="options"><a class="link" href="#options">API: options and overrides</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>As described above, an options object can be added with optional attributes to <strong>override</strong> the <a href="#behaviour">default behaviour</a>:</p>
</div>
<div class="listingblock">
<div class="title">For .buildGetter:</div>
<div class="content">
<pre>{ cacheControl, contentType, etag, getCleanPath, throwErrors }</pre>
</div>
</div>
<div class="listingblock">
<div class="title">For .get:</div>
<div class="content">
<pre>{ cacheControl, contentType, etag, throwErrors }</pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
<div class="sect3">
<h4 id="option-cachecontrol"><a class="link" href="#option-cachecontrol">cacheControl</a></h4>
<div class="paragraph">
<p>(boolean/string/function) Override the default  <code>Cache-Control</code> header value (<code>'public, max-age=31536000, immutable'</code>).</p>
</div>
<div class="ulist">
<ul>
<li>
<p>if set as a <code>false</code> boolean, no <code>Cache-Control</code> headers are sent. A <code>true</code> boolean is just ignored.</p>
</li>
<li>
<p>if set as a string, always use that value. An empty string will act as <code>false</code> and switch off cacheControl.</p>
</li>
<li>
<p>if set as a function: <code>(filePathAndName, resource, mimeType) &#8658; cacheControl</code>. For fine-grained control which can use resource path, resolved MIMEtype string, or file content if needed. <em>filePathAndName</em> is the asset&#8217;s file path and name (relative to the JAR root, or <code>build/resources/main/</code> in dev mode). File content is by resource object: <em>resource</em> is the output from <a href="https://developer.enonic.com/docs/xp/stable/api/lib-io#getresource">ioLib getResource</a>, so your function should handle this if used. This function and the string it returns is meant to replace the default header handling.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
A trick: if a <em>cacheControl</em> function returns <code>null</code>, lib-static&#8217;s default Cache-Control header will be used.
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>An output <em>cacheControl</em> string is used directly in the response.</p>
</div>
<div class="paragraph">
<p>👉 <a href="#example-cache">Usage example</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="option-contenttype"><a class="link" href="#option-contenttype">contentType</a></h4>
<div class="paragraph">
<p>(string/boolean/object/function) Override the built-in <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types">MIME type</a> detection.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>if set as a boolean, switches MIME type handling on/off. <code>true</code> is basically ignored (keep using built-in type detection), <code>false</code> skips processing and removes the content-type header (same as an empty string)</p>
</li>
<li>
<p>if set as a non-empty string, assets will not be processed to try and find the MIME content type. Instead this value will always be preselected and returned.</p>
</li>
<li>
<p>if set as an object, keys are file types (the extensions of the asset file names <em>after compilation</em>, case-insensitive and will ignore dots), and values are Content-Type strings - for example, <code>{"json": "application/json", ".mp3": "audio/mpeg", "TTF": "font/ttf"}</code>. For files with extensions that are not among the keys in the object, the handling will fall back to the built-in handling.</p>
</li>
<li>
<p>if set as a function: <code>(filePathAndName, resource) &#8658; contentType</code>. <em>filePathAndName</em> is the asset file path and name (relative to the JAR root, or <code>build/resources/main/</code> in dev mode). File content is by resource object: <em>resource</em> is the output from <a href="https://developer.enonic.com/docs/xp/stable/api/lib-io#getresource">ioLib getResource</a>, so your function should handle this if used.</p>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Same trick as for the <em>cacheControl</em> function above: if a <em>contentType</em> function returns <code>null</code>, the processing falls back to the default: built-in MIME type detection.
</td>
</tr>
</table>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>An output <em>contentType</em> string is used directly in the response.</p>
</div>
<div class="paragraph">
<p>👉 <a href="#example-content">Usage example</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="option-etag"><a class="link" href="#option-etag">etag</a></h4>
<div class="paragraph">
<p>(boolean) The default behaviour of lib-static is to generate/handle ETag in prod, while skipping it entirely in dev mode.
    - Setting the etag parameter to <code>false</code> will turn <strong>off</strong> etag processing (runtime content processing, headers and handling) in <strong>prod</strong> too.
    - Setting it to <code>true</code> will turn it <strong>on in dev mode</strong> too.</p>
</div>
<div class="paragraph">
<p>👉 <a href="#example-etag">Usage example</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</div>
<div class="sect3">
<h4 id="option-getcleanpath"><a class="link" href="#option-getcleanpath">getCleanPath</a></h4>
<div class="paragraph">
<p>(function) Only used in <a href="#api-buildgetter">.buildGetter</a>. The default behaviour of the returned <code>getStatic</code> function is to take a request object, and compare the beginning of the current requested path (<code>request.rawPath</code>) to the endpoint&#8217;s own root path (<code>request.contextPath</code>) and get a relative asset path below <code>root</code> (so that later, prefixing the <code>root</code> value to that relative path will give the absolute full path to the resource in the JAR). In cases where this default behaviour is not enough, you can override it by adding a <code>getCleanPath</code> param: <code>(request) &#8658; '&lt;resource/path/below/root&gt;'</code>. Emphasis: the returned 'clean' path from this function should be <em>relative to the <code>root</code> folder</em>, not an absolute path in the JAR.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>For example:</strong> if a controller <em>getAnyStatic.es6</em> is accessed with a <a href="https://developer.enonic.com/docs/xp/stable/cms/mappings">controller mapping</a> at <em><a href="https://someDomain.com/resources/public" class="bare">https://someDomain.com/resources/public</a></em>, then that&#8217;s an endpoint with the path <code>resources/public</code> - but that can&#8217;t be determined from the request. So the automatic extraction of a relative path needs a <code>getCleanPath</code> override. Super simplified here:</p>
<div class="listingblock">
<div class="content">
<pre>    const getStatic = libStatic.buildGetter(
        'my-resources',
        {
            getCleanPath: (request) =&gt; {
                if (!request.rawPath.startsWith('resources/public')) { throw Error('Ooops'); }
                return request.rawPath.substring('resources/public'.length);
            }
        }
    );</pre>
</div>
</div>
<div class="paragraph">
<p>Now, since <code>request.rawPath</code> doesn&#8217;t include the protocol or domain, the URL <a href="https://someDomain.com/resources/public/subfolder/target-resource.xml" class="bare">https://someDomain.com/resources/public/subfolder/target-resource.xml</a> will give <code>request.rawPath</code> this value: <code>"resources/public/subfolder/target-resource.xml"</code>. So the <code>getCleanPath</code> function will return <code>"/subfolder/target-resource.xml"</code>, which together with the root, <code>"my-resources"</code>, will look up the resource <em>/my-resources/subfolder/target-resource.xml</em> in the JAR (or in XP dev mode: <em>build/resources/main/my-resources/subfolder/target-resource.xml</em>).</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>👉 <a href="#example-getcleanpath">Another usage example</a></p>
</div>
</div>
<div class="sect3">
<h4 id="option-throwerrors"><a class="link" href="#option-throwerrors">throwErrors</a></h4>
<div class="paragraph">
<p>(boolean, default value is <code>false</code>) By default, the <code>.get</code> method should not throw errors when used correctly. Instead, it internally server-logs (and hash-ID-tags) errors and automatically outputs a 500 error response.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Setting <code>throwErrors</code> to <code>true</code> overrides this: the 500-response generation is skipped, and the error is re-thrown down to the calling context, to be handled there.</p>
</li>
<li>
<p>This does not apply to 400-bad-request and 404-not-found type "errors", they will always generate a 404-response either way. 200 and 304 are also untouched, of course.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>👉 <a href="#example-errors">Usage example</a></p>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mutable-assets"><a class="link" href="#mutable-assets">Important: assets and mutability</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>Immutable assets</strong>, in our context, are files whose content can be <em>trusted to never change</em> without changing the file name. To ensure this, developers should adapt their build setup to <a href="https://survivejs.com/webpack/optimizing/adding-hashes-to-filenames/">content-hash</a> (or at least <a href="https://cloud.google.com/cdn/docs/best-practices#versioned-urls">version</a>) the resource file names when updating them. Many build toolchains can do this automatically, for example Webpack.</p>
</div>
<div class="paragraph">
<p><strong>Mutable assets</strong> on the other hand are any files whose content <em>may</em> change and still keep the same filename/path/URL.</p>
</div>
<div class="sect2">
<h3 id="mutable-headers"><a class="link" href="#mutable-headers">Headers</a></h3>
<div class="paragraph">
<p><strong>Mutable assets should never be served wtih the default header</strong> <code>'Cache-Control': 'public, max-age=31536000, immutable'</code>. That header basically aims to make a browser never contact the server again for that asset, until the URL changes (although caveats exist to this). If an asset is served with that <code>immutable</code> header and later changes content but keeps its name/path, everyone who&#8217;s downloaded it before will have - and to a large extent <em>keep</em> - an outdated version of the asset!</p>
</div>
<div class="paragraph">
<p>Mutable assets <em>can</em> be handled by this library (since ETag support is in place by default), but they <strong>should be given a different Cache-Control header</strong>. This is up to you:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A balanced Cache-Control header, that still limits the number of requests to the server but also allows an asset to be stale for maximum an hour (3600 seconds) (remember that etag headers are still needed besides this):</p>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">{
    'Cache-Control': 'public, max-age=3600',
}</code></pre>
</div>
</div>
</li>
<li>
<p>A more aggressive approach, that makes browsers check the asset&#8217;s freshness with the server, could be:</p>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">{
    'Cache-Control': 'no-cache',
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>In this last case, if the content hasn&#8217;t changed, a simple 304 status code is returned by the getter from <code>.buildGetter</code>, with nothing in the body - so nothing will be downloaded.</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="mutable-implementation"><a class="link" href="#mutable-implementation">Implementation</a></h3>
<div class="paragraph">
<p>If you have mutable assets in your project, there are several ways you could implement the appropriate <code>Cache-Control</code> header with the lib-static library. Three approaches that can be combined or independent:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>Fingerprint all your assets</strong> so that that updated files get a new, uniquely <em>content-dependent filename</em> - ensuring that are all actually immutable.</p>
<div class="ulist">
<ul>
<li>
<p>The most common way: set the build pipeline up so that the file name depends on the content. Webpack can fairly easily <a href="https://webpack.js.org/guides/caching/">add a content hash to the file name</a>, for example: <em>staticAssets/bundle.3a01c73e29.js</em> etc. This is a reliable form of fingerprinting, with the advantage that unchanged files will keep their path and name and hence keep the client-cache intact, even if the XP app is updated and versioned. The disadvantage is that the file names are now dynamic (generated during the build) and harder to predict when writing calls from the code. Working around that is not the easiest, but one way is to export the resulting build stats from webpack and fetch file names at runtime, for example with <a href="https://www.npmjs.com/package/stats-webpack-plugin">stats-webpack-plugin</a>.</p>
</li>
<li>
<p>Another approach is to add version strings to file names, a timestamp etc.</p>
</li>
<li>
<p>Or if you build assets to a subfolder named after the XP app&#8217;s version, an XP controller can easily refer to them, e.g.: <code>"staticAssets/" + app.version + "/myFile.txt</code>. The disadvantage here: client-caching now depends on correct (and manual?) versioning. Every time the version is updated, all clients lose their cached assets, even unchanged ones. And worse, if a new version is deployed erroneously without changing the version string, assets may have changed without the path changing - leading to stale cache.
&#8203;<br>
&#8203;<br></p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>Separate between mutable and immutable assets</strong> in <em>two different directories</em>. Then you can set up asset serving separately. Immutable assets could use lib-static in the default ways. For the mutable assets&#8230;&#8203;</p>
<div class="ulist">
<ul>
<li>
<p>you can simply serve them from _/assets with <a href="https://developer.enonic.com/docs/xp/stable/api/lib-portal#asseturl">portal.assetUrl</a>,</p>
</li>
<li>
<p>or you could serve mutable assets from any custom directory, with a <em>separate instance</em> of lib-static. A combined example:</p>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">    const libStatic = require('lib/enonic/static');

    // Root: /immutable folder. Only immutable assets there, since they are served with immutable-optimized header by default!
    const getImmutableAsset = libStatic.buildGetter('immutable');

    const getMutableAsset = libStatic.buildGetter(

        // Root: /mutable folder. Any assets can be under there...
        'mutable',

        // ...because the options object overrides the Cache-Control header (and only that - etag is preserved, importantly):
        {
            cacheControl: 'no-cache'
        }
    );</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#8203;<br></p>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>It&#8217;s also possible to handle mutable vs immutable assets differently <em>from the same directory</em>, if you know you can distinguish immutable files from mutable ones by some pattern, by using a <strong>function for the <code>cacheControl</code> option</strong>. For example, if only immutable files are fingerprinted by the pattern <code>someName.[base-16-hash].ext</code> and others are not:</p>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">    const libStatic = require('lib/enonic/static');

    // Reliable immutable-filename regex pattern in this case:
    const immutablePattern = /\w+\.[0-9a-fA-F].\w+$/;

    const getStatic = libStatic.buildGetter(

        // Root: the /static folder contains both immutable and mutable files:
        'static',

        {
            cacheControl: (filePathAndName, content) =&gt; {
                if (filePathAndName.match(immutablePattern)) {
                    // fingerprinted file, ergo immutable:
                    return 'public, max-age=31536000, immutable';
                } else {
                    // mutable file:
                    return 'Cache-Control': 'public, max-age=3600';
                }
            }
        }
    );</code></pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>&#8203;<br>
&#8203;<br>
&#8203;<br></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="todo_later_versions"><a class="link" href="#todo_later_versions">TODO: Later versions</a></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="options_params"><a class="link" href="#options_params">Options params</a></h3>
<div class="ulist">
<ul>
<li>
<p><code>indexFallback</code> (<code>false</code>, string, string array, object or function(absolutePath &#8594; stringOrStringarrayOrFalse)): filename(s) (without slashes or path) to fall back to, look for and serve, in cases where the asset path requested is a folder. If not set, requesting a folder will yield an error. Implementaion: before throwing a 404, check if postfixing any of the chosen /index files (with the slash) resolves it. If so, return that.
The rest is up to the developer, and their responsibility how it&#8217;s used: what htm/html/other they explicitly add in this parameter. And cache headers, just same as if they had asked directly for the index file. Set to <code>false</code> (or have the object or function return it) to skip the index fallback.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="response"><a class="link" href="#response">Response</a></h3>
<div class="ulist">
<ul>
<li>
<p><code>'Last-Modified'</code> header, determined on file modified date</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="range_handling"><a class="link" href="#range_handling">Range handling</a></h3>
<div class="ulist">
<ul>
<li>
<p><code>'Accept-Ranges': 'bytes'</code> header</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="resolvepathglobpathregex_root"><a class="link" href="#resolvepathglobpathregex_root">.resolvePath(globPath/regex, root)</a></h3>
<div class="paragraph">
<p>Probably not in this lib? Worth mentioning though:</p>
</div>
<div class="paragraph">
<p>To save huge complexity (detecting at buildtime what the output and unpredictable hash will be and hooking those references up to output), there should be a function that can resolve a fingerprinted asset filename at XP runtime: <code>resolvePath(globPath, root)</code>.</p>
</div>
<div class="paragraph">
<p>For example, if a fingerprinted asset <em>bundle.92d34fd72.js</em> is built into <em>/static</em>, then resolvePath('bundle.<strong>.js', 'static') will look for matching files within <em>/static</em> and return the string <code>"bundle.92d34fd72.js"</code>. We can always later add the functionality that the <code>globPath</code> argument can also be a regex pattern.
- <code>resolvePath</code> should *never</strong> be part of an asset-serving endpoint service - i.e. it should not be possible to send a glob to the server and get a file response. Instead, it’s meant to be used in controllers to fetch the name of a required asset, e.g:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>    pageContributions: &lt;script src="${libStaticEndpoint}/${resolvePath('bundle.*.js', 'static')}"&gt;</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Besides, <code>resolvePath</code> can/should be part of a different library. Can be its own library (‘lib-resolvepath’?) or part of some other general-purpose lib, for example lib-util.</p>
</li>
<li>
<p>In dev mode, <code>resolvePath</code> will often find more than one match and select the most recently updated one (and should log it at least once if that’s the case). In prod mode, it should throw an error if more than one is found, and if only one is found, cache it internally.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2024-10-07 10:15:40 UTC
</div>
</div>
</body>
</html>